import 'package:logging/logging.dart';
import 'package:stream_feed/src/client/aggregated_feed.dart';
import 'package:stream_feed/src/client/batch_operations_client.dart';
import 'package:stream_feed/src/client/collections_client.dart';
import 'package:stream_feed/src/client/file_storage_client.dart';
import 'package:stream_feed/src/client/flat_feed.dart';
import 'package:stream_feed/src/client/image_storage_client.dart';
import 'package:stream_feed/src/client/notification_feed.dart';
import 'package:stream_feed/src/client/personalization_client.dart';
import 'package:stream_feed/src/client/reactions_client.dart';
import 'package:stream_feed/src/client/stream_feed_client_impl.dart';
import 'package:stream_feed/src/client/stream_user.dart';
import 'package:stream_feed/src/core/api/stream_api.dart';
import 'package:stream_feed/src/core/http/stream_http_client.dart';
import 'package:stream_feed/src/core/http/token.dart';
import 'package:stream_feed/src/core/index.dart';

/// {@template faye_url}
/// Default Faye URL.
/// {@endtemplate}
const fayeUrl = 'wss://faye-us-east.stream-io-api.com/faye';

/// {@template runner}
/// Indicates the SDK platform (server, client) for [StreamFeedBase].
/// {@endtemplate}
enum Runner {
  /// Marks the [StreamFeedBase] as running on server-side.
  server,

  /// Marks the [StreamFeedBase] as running on client-side.
  client,
}

/// {@template stream_feed_client}
/// The Stream Feed Client class that manages API calls and authentication.
///
/// To instantiate the client you need an API key.
///
/// To set a current user you need to generate a user token server-side and
/// pass it in.
/// {@endtemplate}
///
/// {@template stream_feed_client.connect}
/// Instantiate the client:
///
/// ```dart
/// var client = StreamFeedClient('api-key');
/// ```
///
/// Then set the current user:
/// ```dart
/// await client.setCurrentUser(const User(id: 'user-id'), Token('user-token'));
/// ```
///
/// The token needs to be generated by one of Stream's server SDKs.
/// {@endtemplate}
abstract class StreamFeedClient implements StreamFeedBase {
  /// {@macro stream_feed_client}
  ///
  /// {@macro stream_feed_client.connect}
  factory StreamFeedClient(
    String apiKey, {
    String? appId,
    StreamHttpClientOptions? options,
    StreamAPI? api,
    String fayeUrl = fayeUrl,
    Level logLevel = Level.WARNING,
    LogHandlerFunction? logHandlerFunction,
  }) =>
      StreamFeedClientImpl(
        apiKey,
        appId: appId,
        options: options,
        api: api,
        fayeUrl: fayeUrl,
        logLevel: logLevel,
        logHandlerFunction: logHandlerFunction,
      );

  /// Returns the current User assigned to [StreamFeedClient].
  StreamUser? get currentUser;

  /// Creates an [AggregatedFeed] from the given slug and with the current
  /// user's id.
  ///
  /// Must call [setCurrentUser] before calling this.
  ///
  /// {@macro aggregatedFeed}
  AggregatedFeed aggregatedFeed(String slug);

  /// Creates a [FlatFeed] from the given slug and with the current user's id.
  ///
  /// Must call [setCurrentUser] before calling this.
  ///
  /// {@macro flatFeed}
  FlatFeed flatFeed(String slug);

  /// Creates a [NotificationFeed] from the given slug and with the current
  /// user's id.
  ///
  /// Must call [setCurrentUser] before calling this.
  ///
  /// {@macro notificationFeed}
  NotificationFeed notificationFeed(String slug);

  /// Set (and connect) the current [user]. Requires a [userToken].
  ///
  /// Pass in optional [extraData] to set additional user fields.
  ///
  /// A user token can be generated using any of Stream's server SDKs.
  ///
  /// ### Dart Example
  /// {@macro stream_feed_server.connect}

  Future<StreamUser> setCurrentUser(
    User user,
    Token userToken, {
    Map<String, Object?>? extraData,
  });
}

/// {@template stream_feed_server}
/// The Stream Feed Server class that manages API calls and authentication, for
/// use in server applications.
///
/// To instantiate the server you need an API key and a secret.
/// You can find the key and secret on the Stream dashboard.
///
/// If you want to use the API client on your web/mobile app
/// use [StreamFeedClient] instead.
/// {@endtemplate}
///
/// {@template stream_feed_server.connect}
/// Instantiate a new client (server side) with [StreamFeedServer]
/// using your api [secret] and [apiKey].
///
/// ```dart
/// final server = StreamFeedServer(
///   'api-key',
///   secret: 'secret',
/// );
/// ```
///
/// Create a token for user with id "the-user-id".
/// ```dart
/// final userToken = server.frontendToken('the-user-id');
/// ```
/// {@endtemplate}
abstract class StreamFeedServer implements StreamFeedBase {
  /// Creates a [StreamFeedServer].
  ///
  /// {@macro stream_feed_server}
  ///
  /// {@macro stream_feed_server.connect}
  factory StreamFeedServer(
    String apiKey, {
    required String secret,
    String? appId,
    StreamHttpClientOptions? options,
    StreamAPI? api,
    String fayeUrl = fayeUrl,
    Level logLevel = Level.WARNING,
    LogHandlerFunction? logHandlerFunction,
  }) =>
      StreamFeedServerImpl(
        apiKey,
        secret: secret,
        appId: appId,
        options: options,
        api: api,
        fayeUrl: fayeUrl,
        logLevel: logLevel,
        logHandlerFunction: logHandlerFunction,
      );

  /// Retrieves the [BatchOperationsClient].
  ///
  /// {@macro batch_operations_client}
  BatchOperationsClient get batch;

  /// Creates an [AggregatedFeed] from the given parameters.
  ///
  /// {@macro aggregatedFeed}
  AggregatedFeed aggregatedFeed(String slug, {required String userId});

  /// Creates a [FlatFeed] from the given paramaters.
  ///
  /// {@macro flat_feed}
  FlatFeed flatFeed(String slug, {required String userId});

  /// Creates a [NotificationFeed] from the given parameters.
  ///
  /// {@macro notificationFeed}
  NotificationFeed notificationFeed(String slug, {required String userId});

  /// Generate a JWT token that includes the [userId] as payload and that is
  /// signed using your Stream API Secret.
  ///
  /// Optionally, you can have tokens expire after a certain amount of time, by
  /// setting the [expiresAt].
  ///
  /// By default, all SDK libraries generate user tokens without an expiration
  /// time.
  Token frontendToken(
    String userId, {
    DateTime? expiresAt,
  });
}

/// {@template stream_feed_base}
/// Base class for a Stream Feed Client/Server. Contains shared methods and
/// properties used in both [StreamFeedClient] and [StreamFeedServer].
///
/// Do not instantiate directly - prefer to use [StreamFeedClient] for
/// client (web, mobile) applications, and [StreamFeedServer] for server
/// operations.
/// {@endtemplate}
///
/// ### Server
/// If you are using the SDK server side, use [StreamFeedServer].
///
/// {@macro stream_feed_server.connect}
///
/// ### Client
/// If you are using the SDK client side, use [StreamFeedClient].
///
/// {@macro stream_feed_client.connect}
abstract class StreamFeedBase {
  /// Instantiates a StreamFeedBase.
  ///
  /// {@macro stream_feed_base}
  factory StreamFeedBase(
    String apiKey, {
    required Runner runner,
    String? secret,
    String? appId,
    StreamHttpClientOptions? options,
    StreamAPI? api,
    String fayeUrl = fayeUrl,
    Level logLevel = Level.WARNING,
    LogHandlerFunction? logHandlerFunction,
  }) =>
      StreamFeedBaseImpl(
        apiKey,
        secret: secret,
        appId: appId,
        options: options,
        runner: runner,
        api: api,
        fayeUrl: fayeUrl,
        logLevel: logLevel,
        logHandlerFunction: logHandlerFunction,
      );

  /// Convenient getter for [CollectionsClient].
  ///
  /// {@macro collections}
  CollectionsClient get collections;

  /// Convenient getter for [FileStorageClient].
  ///
  /// {@macro filesandimages}
  ///
  /// {@macro files}
  FileStorageClient get files;

  /// Convenient getter for [ImageStorageClient].
  ///
  /// {@macro filesandimages}
  ImageStorageClient get images;

  /// Convenient getter for [PersonalizationClient].
  ///
  /// {@macro personalization}
  PersonalizationClient get personalization;

  /// Convenient getter for [ReactionsClient].
  ///
  /// {@macro reactions}
  ReactionsClient get reactions;

  /// Convenient getter for [Runner].
  ///
  /// {@macro runner}
  Runner get runner;

  /// Creates an [AggregatedFeed] from the given parameters.
  ///
  /// {@macro aggregatedFeed}
  AggregatedFeed aggregatedFeedBase(
    String slug, {
    required String userId,
    Token? userToken,
  });

  /// Creates a [FlatFeed] from the given parameters.
  ///
  /// {@macro flatFeed}
  FlatFeed flatFeedBase(
    String slug, {
    required String userId,
    Token? userToken,
  });

  /// Creates a [NotificationFeed] from the given parameters.
  ///
  /// {@macro notificationFeed}
  NotificationFeed notificationFeedBase(
    String slug, {
    required String userId,
    Token? userToken,
  });

  /// Create a new Stream user.
  ///
  /// It is recommened that this is only used server-side.
  ///
  /// ### Usage
  ///
  /// ```dart
  /// await createUser('john-doe', {
  ///   'name': 'John Doe',
  ///   'occupation': 'Software Engineer',
  ///   'gender': 'male',
  /// });
  /// ```
  /// API docs: [adding-users](https://getstream.io/activity-feeds/docs/flutter-dart/users_introduction/?language=dart#adding-users)
  Future<User> createUser(
    String id,
    Map<String, Object?> data, {
    bool getOrCreate = false,
  });

  /// Delete the user.
  ///
  /// It is recommened that this is only used server-side.
  ///
  /// ### Usage:
  ///
  /// ```dart
  /// await deleteUser('123');
  /// ```
  /// API docs: [removing-users](https://getstream.io/activity-feeds/docs/flutter-dart/users_introduction/?language=dart#removing-users)
  Future<void> deleteUser(String id);

  /// Get the user data.
  ///
  /// ### Usage
  ///
  /// ```dart
  /// await getUser('123');
  /// ```
  /// API docs: [retrieving-users](https://getstream.io/activity-feeds/docs/flutter-dart/users_introduction/?language=dart#retrieving-users)
  Future<User> getUser(String id, {bool withFollowCounts = false});

  /// This endpoint allows you to retrieve open graph information from a URL,
  /// which you can then use to add images and a description to activities.
  ///
  /// ### Usage
  ///
  /// ```dart
  /// final urlPreview = await client.og(
  ///   'http://www.imdb.com/title/tt0117500/',
  /// );
  /// ```
  Future<OpenGraphData> og(String targetUrl);

  /// Update the user.
  ///
  /// ### Usage:
  ///
  /// ```dart
  ///   await updateUser('123', {
  ///    'name': 'Jane Doe',
  ///    'occupation': 'Software Engineer',
  ///    'gender': 'female',
  ///  });
  /// ```
  /// API docs: [updating-users](https://getstream.io/activity-feeds/docs/flutter-dart/users_introduction/?language=dart#updating-users)
  Future<User> updateUser(String id, Map<String, Object?> data);

  /// Convenient getter for [StreamUser].
  ///
  /// {@macro user}
  StreamUser user(String userId);
}
